@page "/Equipment"
@page "/Equipment/{id:int}"
@using IRC.Blazor.ModelValidator
@using IRC.Models
@using Blazored.FluentValidation
@inject IEquipmentService EquipmentService

@if (Id == null)
{
    <PageTitle>Create a new Equipment</PageTitle>
    <h3>Create a new Equipment</h3>
}
else
{
    <PageTitle>Edit @equipment.Name</PageTitle>
    <h3>Edit @equipment.Name</h3>
}
<EditForm Model="@equipment" OnValidSubmit="@SubmitValidForm">
    <FluentValidationValidator/>
    <ValidationSummary/>
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="@equipment.Name" class="form-control"></InputText>
        <ValidationMessage For="@(()=>equipment.Name)"/>
    </div>
    <div>
        <label for="serialnumber">Serial Number</label>
        <InputText id="serialnumber" @bind-Value="@equipment.SerialNumber" class="form-control"></InputText>
        <ValidationMessage For="@(()=>equipment.SerialNumber)" />
    </div>
     <div>
        <label for="inventorynumber">Inventory Number</label>
        <InputText id="inventorynumber" @bind-Value="@equipment.InventoryNumber" class="form-control"></InputText>
        <ValidationMessage For="@(()=>equipment.InventoryNumber)" />
    </div>
    <div>
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="@equipment.Quantity" class="form-control"></InputNumber>
        <ValidationMessage For="@(()=>equipment.Quantity)" />
    </div>
    <div>
        <label for="type">Type</label>
        <InputSelect id="type" @bind-Value="@equipment.Type" class="form-select">
            @foreach (var value in Enum.GetValues(typeof(EquipmentType)))
            {
                <option value="@value" selected="@((EquipmentType)value == equipment.Type)">
                    @value.ToString()
                </option>
            }
        </InputSelect>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteEquipment">Delete Equipment</button>
    <br />
    <Label>@message</Label>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    string message = "";

    EquipmentF equipment = new EquipmentF();
    CreateEquipmentDTO createEquipment = new CreateEquipmentDTO();
    UpdateEquipmentDTO updateEquipment = new UpdateEquipmentDTO();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New Equipment" : "Update Equipment";
        await EquipmentService.GetEquipments(); 
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            equipment.Type = EquipmentType.Laptop;
        }
        else
        {
            equipment = await EquipmentService.GetEquipmentF((int) Id);

        }
    }
    async Task SubmitValidForm()
    {
        if (Id == null)
        {
            message = "Created Successfully !";
            createEquipment.Name = equipment.Name;
            createEquipment.InventoryNumber = equipment.InventoryNumber;
            createEquipment.Quantity = equipment.Quantity;
            createEquipment.SerialNumber = equipment.SerialNumber;
            createEquipment.Type = equipment.Type;
            await EquipmentService.CreateEquipment(createEquipment);
        }
        else
        {
            message = "Updated Successfully...";
            updateEquipment.Name = equipment.Name;
            updateEquipment.InventoryNumber = equipment.InventoryNumber;
            updateEquipment.Quantity = equipment.Quantity;
            updateEquipment.SerialNumber = equipment.SerialNumber;
            updateEquipment.Type = equipment.Type;
            await EquipmentService.UpdateEquipment(updateEquipment,(int)Id);
        }
    }
    async Task DeleteEquipment()
    {
        await EquipmentService.DeleteEquipment((int) Id);
    }
}
